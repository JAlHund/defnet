local http_server = require "defnet.http_server"

local HTTP_SERVER_PORT = 9190

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.4, 0.5, 0.8, 1.0) })

	self.open_browser = gui.get_node("open_browser/button")
	
	self.http_server = http_server.create(HTTP_SERVER_PORT)
	self.http_server.router.get("/foo/(.*)$", function(matches)
		return self.http_server.html("boo" .. matches[1])
	end)
	self.http_server.router.get("/lorem$", function(matches, stream)
		stream(self.http_server.html())
		local chunks = { "Lorem ", "ipsum ", "dolor ", "sit ", "amet, ", "consectetur ", "adipiscing ", "elit." }
		return function()
			if #chunks > 0 then
				return stream(self.http_server.to_chunk(table.remove(chunks, 1)))
			else
				return stream(self.http_server.to_chunk(""))
			end
		end
	end)
	self.http_server.router.get("/$", function()
		return self.http_server.html("Hello World")
	end)
	self.http_server.router.get("^/logo$", function()
		local f = io.open("assets/images/logo.png")
		local data = f:read("*a")
		return self.http_server.file(data, "logo.png")
	end)
	self.http_server.router.unhandled(function(method, uri)
		return self.http_server.html("Oops, couldn't find that one!", http_server.NOT_FOUND)
	end)
	self.http_server.start()
end

function final(self)
	msg.post(".", "release_input_focus")
	
	self.http_server.stop()
end

function update(self, dt)
	self.http_server.update()
end

function on_input(self, action_id, action)
	if gui.pick_node(self.open_browser, action.x, action.y) and action.released then
		sys.open_url("http://localhost:" .. HTTP_SERVER_PORT)
	end
end

function on_reload(self)
	print("onreload")
    -- Add input-handling code here
    -- Remove this function if not needed
end
